[agent]
  interval = "10s"
  flush_interval = "10s"
  hostname = "telegraf"

# -------------------
# EVE.JSON (alertas e flows)
# -------------------
# [[inputs.tail]]
#   files = ["/var/log/suricata/eve.json"]
#   from_beginning = false
#   data_format = "json"
#   json_name_key = "event_type"
#   json_time_key = "timestamp"
#   json_time_format = "2006-01-02T15:04:05.999999-0700"
#   tag_keys = ["src_ip", "dest_ip", "proto"]

[[inputs.tail]]
  files = ["/var/log/suricata/eve.json"]
  from_beginning = false
  data_format = "json"
  json_name_key = "event_type"
  json_time_key = "timestamp"
  json_time_format = "2006-01-02T15:04:05.999999-0700"
  tag_keys = ["event_type"]

# Extrair m\u00e9tricas do bloco "stats" e expor com prefixo suricata_
[[processors.starlark]]
  source = '''
def apply(metric):
  if metric.tags.get("event_type") != "stats":
    return [metric]

  stats = metric.fields.get("stats")
  if not stats:
    return [metric]

  new_metrics = []

  # Flow
  flow = stats.get("flow", {})
  if flow:
    new_metrics.append({"name": "suricata_flow_total", "fields": {"value": flow.get("total", 0)}, "tags": {}})
    new_metrics.append({"name": "suricata_flow_active", "fields": {"value": flow.get("active", 0)}, "tags": {}})
    new_metrics.append({"name": "suricata_flow_tcp", "fields": {"value": flow.get("tcp", 0)}, "tags": {}})
    new_metrics.append({"name": "suricata_flow_memuse_bytes", "fields": {"value": flow.get("memuse", 0)}, "tags": {}})

  # TCP
  tcp = stats.get("tcp", {})
  if tcp:
    new_metrics.append({"name": "suricata_tcp_invalid_checksum_total", "fields": {"value": tcp.get("invalid_checksum", 0)}, "tags": {}})
    new_metrics.append({"name": "suricata_tcp_memuse_bytes", "fields": {"value": tcp.get("memuse", 0)}, "tags": {}})
    new_metrics.append({"name": "suricata_tcp_reassembly_memuse_bytes", "fields": {"value": tcp.get("reassembly_memuse", 0)}, "tags": {}})

  # Detect/Alerts
  detect = stats.get("detect", {})
  if detect:
    new_metrics.append({"name": "suricata_alerts_total", "fields": {"value": detect.get("alert", 0)}, "tags": {}})
    engines = detect.get("engines", [])
    if engines:
      new_metrics.append({"name": "suricata_rules_loaded", "fields": {"value": engines[0].get("rules_loaded", 0)}, "tags": {}})
      new_metrics.append({"name": "suricata_rules_failed", "fields": {"value": engines[0].get("rules_failed", 0)}, "tags": {}})

  return new_metrics
'''

# Contador de eventos por tipo
[[processors.enum]]
  [[processors.enum.mapping]]
    field = "event_type"
    dest = "suricata_event_type"
    default = 0
    [processors.enum.mapping.value_mappings]
      alert = 1
      flow = 2
      stats = 3

# Converter m√©tricas de stats (CPU, mem, throughput)
[[processors.converter]]
  [processors.converter.fields]
    integer = [
      "flow.bytes_toserver",
      "flow.bytes_toclient",
      "flow.pkts_toserver",
      "flow.pkts_toclient",
      "stats.capture.kernel_packets",
      "stats.decoder.pkts",
      "stats.decoder.bytes",
      "stats.flow.memuse",
      "stats.tcp.reassembly_memuse",
      "stats.detect.alert"
    ]

[[outputs.prometheus_client]]
  listen = ":9273"
  metric_version = 2
